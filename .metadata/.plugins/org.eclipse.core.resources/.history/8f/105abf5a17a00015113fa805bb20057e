package ie.gmit.sw;

public class Queues {
	BlockingQueue (int)
	public class VigenerHandler implements Runnable{
	private BlockingQueue<Request> queue;
	private Map<Long, String> out = new ConcurrentHashMap<Long, String>();
	public VignereHandler(BlockingQueue<Request> q, Map<> out) {
	this.queue = q;
	this.out = out;
	}
	public void run() {
	try{
	Request req = queueu.take();
	VigenereBreaker vb = Naming....
	String result = vb.decrypt(req.getText(), req.getKeyLenght());
	out.put(req.getJbNumber(), result);
	}
	}
	}
	public class VigenereRequestManager {
	private BlockingQueue queue = new ArrayBlockingQueue<Request>(10);
	private Map<Long, String> out = new ConcurrentHashMap<Long, String>();
	public void add(final Request r){
	try{
	//queue.put(r)//blocks if queue full
	new Thread(new Runnable(){
	public void run(){
	try{
	queue.put(r);
	}catch(){
	}
	}
	}).start();
	}
	catch{
	}
	}
	public String getResult(long jobnumber) {
	if(out.containsKey(jobNumber)){
	return out.get(jobNumber);
	}
	else{
	return null; //no result
	}
	}
	}
	public class Request {
	private String cypherText;
	private int maxKeySize;
	private long jobNumber;
	constructor + getter/setter
	}
	}
}
